var Tree={version:"1.3.7"};if(typeof exports!="undefined"){exports.Tree=Tree}Tree.parse=function(str){var top=new Tree.Node;var curr=top.append(new Tree.Node);var i;curr.value="";for(i=0;i<str.length;i++){var c=str[i];if(c=="["){curr=curr.append(new Tree.Node);curr.value=""}else if(c=="]"){curr=curr.parent;if(curr===top)throw"parse error"}else if(c==","){curr=curr.parent.append(new Tree.Node);curr.value=""}else{curr.value+=c}}for(i=0;i<top.children.length;i++)top.children[i].parent=null;if(top.children.length===1)return top.children[0];return top.children};Tree.stringify=function(nodes){var f=function(node){var str="";if("value"in node)str+=node.value;if(node.children&&node.children[0]){str+="["+node.children.map(f).join(",")+"]"}return str};if(!Array.isArray(nodes))nodes=[nodes];return nodes.map(f).join(",")};(function(){var b32=4294967296,f=15,b=[],str=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"];function uid(){var i=0;var r=Math.random()*b32;b[i++]=str[r&f];b[i++]=str[r>>>4&f];b[i++]=str[r>>>8&f];b[i++]=str[r>>>12&f];b[i++]=str[r>>>16&f];b[i++]=str[r>>>20&f];b[i++]=str[r>>>24&f];b[i++]=str[r>>>28&f];r=Math.random()*b32;b[i++]=str[r&f];b[i++]=str[r>>>4&f];b[i++]=str[r>>>8&f];b[i++]=str[r>>>12&f];b[i++]=str[r>>>16&f];b[i++]=str[r>>>20&f];b[i++]=str[r>>>24&f];b[i++]=str[r>>>28&f];return"_"+b.join("")}Tree.uid=uid})();Tree.clone=function(nodes,keep_ids,fields_to_clone){var f=function(node){var i;var cloned=new node.constructor;if(fields_to_clone){for(i=0;i<fields_to_clone.length;i++)cloned[fields_to_clone[i]]=node[fields_to_clone[i]]}else{for(var key in node){if(key[0]!=="_")cloned[key]=node[key]}}delete cloned.ls;delete cloned.rs;delete cloned.parent;if(node.id&&!keep_ids)cloned.id=Tree.uid();if(node.children){cloned.children=[];for(i=0;i<node.children.length;i++){cloned.children.push(f(node.children[i]));cloned.children[i].parent=cloned}for(i=0;i<node.children.length;i++){cloned.children[i].ls=cloned.children[i-1];cloned.children[i].rs=cloned.children[i+1]}}return cloned};if(!Array.isArray(nodes))return f(nodes);var cloned=nodes.map(f);if(nodes.length>1)for(var i=0;i<nodes.length;i++){if(i>0&&nodes[i].ls===nodes[i-1])cloned[i].ls=cloned[i-1];if(i<nodes.length-1&&nodes[i].rs===nodes[i+1])cloned[i].rs=cloned[i+1]}return cloned};Tree.get_mapping_between=function(source_tree,target_tree){var map={};function mapfn(source,target){if(source.id in map)throw"duplicate id in source tree";map[source.id]=[target];if(source.children.length!==target.children.length){if(!source.has_children())map[source.id]=target.select_all();else if(!target.has_children())source.for_each(function(s){map[s.id]=[target]});else throw"tree structures don't match"}else{for(var i=0;i<source.children.length;i++)mapfn(source.children[i],target.children[i])}}if(Array.isArray(source_tree)){if(source_tree.length!==target_tree.length)throw"tree structures don't match";for(var i=0;i<source_tree.length;i++)mapfn(source_tree[i],target_tree[i])}else mapfn(source_tree,target_tree);return map};Tree.get_1to1_mapping_between=function(source_tree,target_tree,strict){var map={};if(arguments.length<3)strict=true;function mapfn(source,target){if(strict&&source.id in map)throw"duplicate id in source tree";map[source.id]=[target];if(strict&&source.children.length!==target.children.length)throw"tree structures don't match";var slen=source.children.length,tlen=target.children.length;for(var i=0;i<slen;i++){if(i<tlen)mapfn(source.children[i],target.children[i]);else source.children[i].for_each(function(s){map[s.id]=[]})}}if(Array.isArray(source_tree)){if(strict&&source_tree.length!==target_tree.length)throw"tree structures don't match";var slen=source_tree.length,tlen=target_tree.length;for(var i=0;i<slen;i++){if(i<tlen)mapfn(source_tree[i],target_tree[i]);else source_tree[i].for_each(function(s){map[s.id]=[]})}}else mapfn(source_tree,target_tree);return map};Tree.nodes_to_range=function(nodes){var N=nodes.length;if(N===0)return[];if(N===1)return[nodes[0]];var tree=nodes[0];while(tree.parent)tree=tree.parent;var paths=nodes.map(function(node){return Tree.get_path(node)});var same=function(len){var val=paths[0][len];for(var i=0;i<paths.length;i++){if(paths[i].length<=len+1)return false;if(paths[i][len]!==val)return false}return true};var cpl=0;while(same(cpl))cpl++;var cca=Tree.get_child(paths[0].slice(0,cpl),tree);var rm=-1,lm=cca.children.length,i;for(i=0;i<N;i++){var n=Tree.get_child(paths[i].slice(0,cpl+1),tree);var idx=cca.children.indexOf(n);if(idx>rm)rm=idx;if(idx<lm)lm=idx}var range=[];for(i=lm;i<=rm;i++)range.push(cca.children[i]);return range};Tree.insert=function(parent,idx,node){node.ls=parent.children[idx-1];if(parent.children[idx-1])parent.children[idx-1].rs=node;node.rs=parent.children[idx];if(parent.children[idx])parent.children[idx].ls=node;node.parent=parent;parent.children.splice(idx,0,node);return node};Tree.insert_range=function(parent,idx,nodes){var N=nodes.length;if(N===0)return;nodes[0].ls=parent.children[idx-1];if(parent.children[idx-1])parent.children[idx-1].rs=nodes[0];nodes[N-1].rs=parent.children[idx];if(parent.children[idx])parent.children[idx].ls=nodes[N-1];for(var i=0;i<N;i++)nodes[i].parent=parent;parent.children=parent.children.slice(0,idx).concat(nodes,parent.children.slice(idx));return nodes};Tree.append_range=function(parent,nodes){var N=nodes.length;if(N===0)return;var last=parent.children[parent.children.length-1];if(last)last.rs=nodes[0];nodes[0].ls=last;nodes[N-1].rs=null;for(var i=0;i<N;i++)nodes[i].parent=parent;parent.children=parent.children.concat(nodes);return nodes};Tree.filterRange=function(selector,node,no_overlap){var result=[];var nodes=Array.isArray(node)?node:[node];var f=function(nodes,idx){var range=[],n=nodes[idx];for(var i=idx;i<nodes.length;i++){range.push(nodes[i]);if(selector(range)){result.push(range.slice());if(no_overlap)return i-idx}}if(n.children){for(var i=0;i<n.children.length;i++)i+=f(n.children,i)}return 0};for(var i=0;i<nodes.length;i++)i+=f(nodes,i);return result};Tree.append=function(parent,node){var last=parent.children[parent.children.length-1];if(last)last.rs=node;node.ls=last;node.rs=null;node.parent=parent;parent.children.push(node);return node};Tree.remove=function(node){var idx;var siblings=node.parent.children;idx=siblings.indexOf(node);if(siblings[idx-1])siblings[idx-1].rs=node.rs;if(siblings[idx+1])siblings[idx+1].ls=node.ls;siblings.splice(idx,1);node.parent=null;return idx};Tree.remove_range=function(nodes){var N=nodes.length;if(N===0)return;var siblings=nodes[0].parent.children;var idx=siblings.indexOf(nodes[0]);if(siblings[idx-1])siblings[idx-1].rs=nodes[N-1].rs;if(siblings[idx+N])siblings[idx+N].ls=nodes[0].ls;siblings.splice(idx,N);for(var i=0;i<nodes.length;i++)nodes[i].parent=null;return idx};Tree.replace=function(n1,n2){if(n1===n2)return n1;if(n2.parent)Tree.remove(n2);var parent=n1.parent,idx=Tree.remove(n1);return Tree.insert(parent,idx,n2)};Tree.switch_siblings=function(n1,n2){if(n1.parent!=n2.parent)throw"Called switch_siblings on nodes that are no siblings!";var p=n1.parent;var idx1=p.children.indexOf(n1);var idx2=p.children.indexOf(n2);p.children[idx1]=n2;p.children[idx2]=n1;var h;if(n1.rs==n2){if(n1.ls)n1.ls.rs=n2;if(n2.rs)n2.rs.ls=n1;n1.rs=n2.rs;n2.ls=n1.ls;n1.ls=n2;n2.rs=n1}else if(n1.ls==n2){if(n1.rs)n1.rs.ls=n2;if(n2.ls)n2.ls.rs=n1;n1.ls=n2.ls;n2.rs=n1.rs;n1.rs=n2;n2.ls=n1}else{if(n1.ls)n1.ls.rs=n2;if(n1.rs)n1.rs.ls=n2;if(n2.ls)n2.ls.rs=n1;if(n2.rs)n2.rs.ls=n1;h=n1.ls;n1.ls=n2.ls;n2.ls=h;h=n1.rs;n1.rs=n2.rs;n2.rs=h}};Tree.validate=function(nodes){var check=function(node,parent){if(node.parent!=parent)throw"wrong parent information";if(node.children){for(var i=0;i<node.children.length;i++){var child=node.children[i];if(child.ls!=node.children[i-1])throw"wrong ls information";if(child.rs!=node.children[i+1])throw"wrong rs information";check(child,node)}}};if(!Array.isArray(nodes))nodes=[nodes];for(var i=0;i<nodes.length;i++)check(nodes[i],null)};Tree.get_idx=function(node){if(node.parent)return node.parent.children.indexOf(node);else return-1};Tree.get_child=function(path,node){for(var i=0;i<path.length;i++){if(!node.children||node.children.length<=path[i])return null;node=node.children[path[i]]}return node};Tree.get_parent=function(level,node){for(var i=0;i<level;i++){if(node.parent)node=node.parent;else return null}return node};Tree.get_path=function(node){var path=[];while(node.parent){path.unshift(node.parent.children.indexOf(node));node=node.parent}return path};Tree.for_each=function(f,node){var nodes=Array.isArray(node)?node:[node];var traverse=function(node){f(node);if(node.children)for(var i=0;i<node.children.length;i++)traverse(node.children[i])};for(var i=0;i<nodes.length;i++)traverse(nodes[i])};Tree.map=function(f,node){var nodes=Array.isArray(node)?node:[node];var res=[];var traverse=function(node){res.push(f(node));if(node.children)for(var i=0;i<node.children.length;i++)traverse(node.children[i])};for(var i=0;i<nodes.length;i++)traverse(nodes[i]);return res};Tree.filter=function(selector,node){var result=[];var nodes=Array.isArray(node)?node:[node];var f=function(node){if(selector(node))result.push(node);if(node.children)for(var i=0;i<node.children.length;i++)f(node.children[i])};for(var i=0;i<nodes.length;i++)f(nodes[i]);return result};Tree.select_all=function(node){return Tree.filter(function(){return true},node)};Tree.select_first=function(selector,node){var f=function(node){var curr=node;for(;;){if(selector(curr))return curr;if(curr.children&&curr.children[0]){curr=curr.children[0];continue}if(curr===node)return null;while(!curr.rs){curr=curr.parent;if(curr===node)return null}curr=curr.rs}};var nodes=Array.isArray(node)?node:[node];for(var i=0;i<nodes.length;i++){var n=f(nodes[i]);if(n)return n}return null};Tree.get_cca=function(nodes){var paths=nodes.map(function(node){return Tree.get_path(node)});var same=function(len){var val=paths[0][len];for(var i=0;i<paths.length;i++){if(paths[i].length<=len+1)return false;if(paths[i][len]!==val)return false}return true};var cpl=0;while(same(cpl))cpl++;var d=paths[0].length-cpl,n=nodes[0];for(var i=0;i<d;i++)n=n.parent;return n};Tree.get_leaf_nodes=function(node){return Tree.filter(function(n){return!(n.children&&n.children.length)},node)};Tree.is_root=function(node){return!node.parent};Tree.is_range=function(nodes){for(var i=1;i<nodes.length;i++){if(nodes[i-1].rs!==nodes[i])return false}return true};Tree.get_root=function(node){while(node.parent)node=node.parent;return node};Tree.get_by_value=function(value,node){return Tree.filter(function(n){return n.value===value},node)};Tree.get_by_id=function(id,node){return Tree.select_first(function(n){return n.id===id},node)};Tree.Node=function(){this.children=[];this.parent=null;this.ls=null;this.rs=null;this.id=Tree.uid()};Tree.Node.prototype.stringify=function(){return Tree.stringify(this)};Tree.Node.prototype.clone=function(keep_ids,fields_to_clone){return Tree.clone(this,keep_ids,fields_to_clone)};Tree.Node.prototype.get_mapping_to=function(target){return Tree.get_mapping_between(this,target)};Tree.Node.prototype.get_1to1_mapping_to=function(target,strict){return Tree.get_1to1_mapping_between(this,target,strict)};Tree.Node.prototype.insert=function(idx,node){return Tree.insert(this,idx,node)};Tree.Node.prototype.insert_range=function(idx,nodes){return Tree.insert_range(this,idx,nodes)};Tree.Node.prototype.append_range=function(nodes){return Tree.append_range(this,nodes)};Tree.Node.prototype.append=function(node){return Tree.append(this,node)};Tree.Node.prototype.remove=function(){return Tree.remove(this)};Tree.Node.prototype.remove_range=function(nodes){return Tree.remove_range(nodes)};Tree.Node.prototype.replace_with=function(other){return Tree.replace(this,other)};Tree.Node.prototype.switch_with_sibling=function(other){return Tree.switch_siblings(this,other)};Tree.Node.prototype.validate=function(){return Tree.validate(this)};Tree.Node.prototype.get_child=function(path){return Tree.get_child(path,this)};Tree.Node.prototype.get_parent=function(level){return Tree.get_parent(level,this)};Tree.Node.prototype.get_path=function(){return Tree.get_path(this)};Tree.Node.prototype.for_each=function(f){return Tree.for_each(f,this)};Tree.Node.prototype.map=function(f){return Tree.map(f,this)};Tree.Node.prototype.filter=function(f){return Tree.filter(f,this)};Tree.Node.prototype.filterRange=function(f,no_overlap){return Tree.filterRange(f,this,no_overlap)};Tree.Node.prototype.select_all=function(){return Tree.select_all(this)};Tree.Node.prototype.select_first=function(f){return Tree.select_first(f,this)};Tree.Node.prototype.get_leaf_nodes=function(){return Tree.get_leaf_nodes(this)};Tree.Node.prototype.is_root=function(){return Tree.is_root(this)};Tree.Node.prototype.get_root=function(){return Tree.get_root(this)};Tree.Node.prototype.get_by_value=function(value){return Tree.get_by_value(value,this)};Tree.Node.prototype.get_by_id=function(id){return Tree.get_by_id(id,this)};Tree.Node.prototype.has_children=function(){return this.children&&this.children.length>0};Tree.Node.prototype.get_idx=function(){return Tree.get_idx(this)};
